#binary binary_search without recursion
def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    mid = 0
    while low <= high:
        mid = (high + low) // 2
        if arr[mid] < x:
            low = mid + 1
        elif arr[mid] > x:
            high = mid - 1
        else:
            return mid
    return -1
arr = [ 2, 3, 4, 10, 40 ]
x = 10
result = binary_search(arr, x)
if result != -1:
    print("Element is present at index", str(result))
else:
    print("Element is not present in array")
#Time Complexity: O(log n)
#Auxiliary Space: O(1)
#binary binary_search with recursion
def binary_search(arr,l,h,x):
    if(l<=h):
        mid=(l+h)//2
        if(arr[mid]==x):
            return mid
        elif(arr[mid]>x):
            return binary_search(arr,l,mid-1,x)
        else:
            return binary_search(arr,mid+1,h,x)
    else:
        return -1 
n=int(input())
arr=list(map(int, input("elements of array:-").strip().split()))
x=10
print(arr)
result=binary_search(arr,0,n-1,x)
if result != -1:
    print("Element is present at index",result)
else:
    print("Element is not present in array")
#Time Complexity: O(log n)
#Auxiliary Space: O(log n)
